// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String      @id @default(uuid())
  email   String   @unique
  password String
  name    String?
  profile  String?
  role String @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likeComments CommentOnUser[] 
  refreshToken RefreshToken?
  posts   Post[]
  comments Comment[]
}

model RefreshToken {
  id  String @id @default(uuid())
  token  String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user   User    @relation(fields: [refreshTokenId], references: [id])
  refreshTokenId String     @unique
}

model Post {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  highlight Boolean @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  category   Category?    @relation(fields: [categoryId], references: [id])
  categoryId String?
  image     String?
  select    DateTime?
  comments  Comment[]
}

model Comment {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  content   String
  likeUsers CommentOnUser[]
  post      Post?     @relation(fields: [postId], references: [id])
  postId    String? 
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  parentId  String?
  parent    Comment? @relation("daetgeul", fields: [parentId], references: [id])
  childs    Comment[] @relation("daetgeul")
}

model CommentOnUser {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  like      Comment @relation(fields: [likeId], references: [id])
  likeId    String  
  postId    String  @default("postId")
  createdAt DateTime @default(now())

  @@id([userId, likeId])
}

model Category {
  id        String      @id @default(uuid())
  name     String       @unique
  posts   Post[]
}
